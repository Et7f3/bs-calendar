##########################################################################
#                                                                        #
#  This file is part of Calendar.                                        #
#                                                                        #
#  Copyright (C) 2003-2009 Julien Signoles                               #
#                                                                        #
#  you can redistribute it and/or modify it under the terms of the GNU   #
#  Lesser General Public License version 2.1 as published by the         #
#  Free Software Foundation.                                             #
#                                                                        #
#  It is distributed in the hope that it will be useful,                 #
#  but WITHOUT ANY WARRANTY; without even the implied warranty of        #
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         #
#  GNU Lesser General Public License for more details.                   #
#                                                                        #
#  See the GNU Lesser General Public Licence version 2.1 for more        #
#  details (enclosed in the file LGPL).                                  #
#                                                                        #
##########################################################################

# $Id$

# Used programs
###############

CAMLC	= @OCAMLC@
CAMLOPT	= @OCAMLOPT@
CAMLDEP	= @OCAMLDEP@
CAMLDOC	= @OCAMLDOC@
CAMLWEB	= @OCAMLWEB@
CAMLWC	= @OCAMLWC@
CAMLDOT	= @OCAMLDOT@
CAMLLIB	= @OCAMLLIB@
CAMLFIND= @OCAMLFIND@

# Object/Library File Extensions
OBJ_EXT = @OBJEXT@
LIB_EXT = @LIBEXT@

# Project
#########

NAME	= calendar
NAMELIB = calendarLib
VERSION	= 2.01.1+dev

LIBDIR	= target

LIBS	= $(LIBDIR)/$(NAMELIB).cmo $(LIBDIR)/$(NAMELIB).cma
CLIBS   =
ifneq ($(CAMLOPT),no)
LIBS	:= $(LIBS) $(LIBDIR)/$(NAMELIB).cmx $(LIBDIR)/$(NAMELIB).cmxa
CLIBS   := $(CLIBS) $(LIBDIR)/$(NAMELIB)$(OBJ_EXT) \
	$(LIBDIR)/$(NAMELIB)$(LIB_EXT)
endif

DIRS	= src target tests

SRC	= utils.mli utils.ml time_Zone.mli time_Zone.ml period.mli \
	time_sig.mli time.mli time.ml ftime.mli ftime.ml \
	date_sig.mli date.mli date.ml \
	calendar_sig.mli calendar_builder.mli calendar_builder.ml \
	calendar.mli calendar.ml fcalendar.mli fcalendar.ml \
	printer.mli printer.ml \
	version.mli version.ml
SRC	:= $(addprefix src/, $(SRC))

ML	= $(filter %.ml, $(SRC))
MLI	= $(filter %.mli, $(SRC))

CMO	= $(ML:.ml=.cmo)
CMX	= $(CMO:.cmo=.cmx)
CMI	= $(MLI:.mli=.cmi)
CMI_ONLY= src/period.cmi src/date_sig.mli src/time_sig.mli #src/calendar_sig.mli

GENERATED= src/version.ml

# Libs and flags
################

CAMLIBS	= $(addprefix -I , $(DIRS))

CAMLFLAGS= $(CAMLIBS)
BYTEFLAGS= $(CAMLFLAGS)
LINK_OPTFLAGS = $(CAMLFLAGS) -noassert
OPTFLAGS = $(LINK_OPTFLAGS) -for-pack CalendarLib

# Main rules
############

all: $(LIBS) META

$(LIBDIR)/$(NAMELIB).cmo: $(CMI_ONLY) $(CMO)
	mkdir -p $(LIBDIR)
	$(CAMLFIND) ocamlc $(BYTEFLAGS) -pack -o $@ \
		$(filter-out $(LIBDIR), $^)

$(LIBDIR)/$(NAMELIB).cma: $(LIBDIR)/$(NAMELIB).cmo
	$(CAMLFIND) ocamlc $(BYTEFLAGS) -a -o $@ $<

$(LIBDIR)/$(NAMELIB).cmx: $(CMI_ONLY) $(CMX)
	mkdir -p $(LIBDIR)
	$(CAMLFIND) ocamlopt $(LINK_OPTFLAGS) -pack -o $@ \
		$(filter-out $(LIBDIR), $^)

$(LIBDIR)/$(NAMELIB).a $(LIBDIR)/$(NAMELIB).cmxa: $(LIBDIR)/$(NAMELIB).cmx 
	$(CAMLFIND) ocamlopt $(LINK_OPTFLAGS) -a -o $@ $<

src/version.ml: Makefile
	echo "let version = \"$(VERSION)\"" > $@
	echo "let date = \"`date`\"" >> $@

META: Makefile
	echo "description = \"$(NAME) library\"" > $@
	echo "version = \"$(VERSION)\"" >> $@
	echo "archive(byte) = \"$(NAMELIB).cma\"" >> $@
	echo "archive(native) = \"$(NAMELIB).cmxa\"" >> $@
	echo "requires = \"unix str\"" >> $@

# Generic rules
###############

%.gz: %
	gzip -f --best $<

.SUFFIXES: .ml .mli .cmo .cmi .cmx $(OBJ_EXT)

.mli.cmi:
	$(CAMLC) $(BYTEFLAGS) -c $<

.ml.cmo:
	$(CAMLC) $(BYTEFLAGS) -c $<

.ml$(OBJ_EXT):
	$(CAMLOPT) $(OPTFLAGS) -c $<

.ml.cmx:
	$(CAMLOPT) $(OPTFLAGS) -c $<

# Tests
#######

TESTS_SRC= gen_test.mli gen_test.ml test_timezone.ml test_time.ml \
	test_ftime.ml test_date.ml test_calendar.ml test_fcalendar.ml \
	test_pcalendar.ml test_fpcalendar.ml test_printer.ml test.ml
TESTS_SRC:= $(addprefix tests/, $(TESTS_SRC))

TESTS_ML= $(filter %.ml, $(TESTS_SRC))
TESTS_CMO= $(TESTS_ML:.ml=.cmo)

tests/test: $(LIBDIR)/$(NAMELIB).cmo $(TESTS_CMO)
	$(CAMLC) -o $@ $(BYTEFLAGS) unix.cma str.cma $(LIBDIR)/$(NAMELIB).cmo \
		$(TESTS_CMO)

.PHONY: tests
tests: tests/test
	./$<

# Documentation
###############

wc: $(SRC)
	$(CAMLWC) -p $^

$(NAMELIB).ps: $(SRC)
	$(CAMLWEB) --ps -o $@ $^

utils/example.cmo: utils/example.ml
	$(CAMLC) -I +ocamldoc -I utils -c $<

.PHONY: doc
doc: $(CMO) utils/example.cmo
	mkdir -p doc
	rm -f doc/*
	$(CAMLDOC) -g utils/example.cmo -colorize-code -I src -d doc \
		$(MLI) $(ML)

# Headers
#########

.PHONY: headers
headers:
	headache -c headache_config.txt -h HEADER $(SRC) $(TESTS_SRC) \
	  Makefile.in utils/example.ml
	headache -c headache_config.txt -h CONFIGURE_HEADER configure.in

# Install
#########

install: $(LIBS) $(CLIBS) META
	@if [ "`sed -n -e 's/version = "\([0-9.]*\)"/\1/p' META`" = "$(VERSION)" ]; then \
	  (if test -d `ocamlfind install -help | grep destdir | sed -e "s/.*default: \(.*\))/\1/"`/$(NAME); then $(MAKE) uninstall; fi;\
	  $(CAMLFIND) install $(NAME) target/*.cm[iox] target/*.cma target/*.cmxa $(MLI) $(CMI) $(CLIBS) META\
	)else \
	  (echo; echo "Not the good version. Please, do :"; \
	   echo "  make clean && make"; \
	   echo "next reinstall"; echo) \
	fi

uninstall:
	$(CAMLFIND) remove $(NAME)

# Exporting
###########

EXPORT_DIR= $$HOME/WWW/prog/$(NAME)
TMP_DIR	= tmp

export: doc #$(NAME).ps.gz
	cvs export -d $(TMP_DIR)/$(NAME)-$(VERSION) -D now $(NAME)
	rm -rf $(EXPORT_DIR)/doc
	cp -rf .depend configure config.status doc $(TMP_DIR)/$(NAME)-$(VERSION)
	cp -rf CHANGES doc $(EXPORT_DIR)
	chmod -R ugo+r $(TMP_DIR)/$(NAME)-$(VERSION)
	cd $(TMP_DIR); \
	  (rm -f $(NAME)-$(VERSION)/html/touch-html \
		$(NAME)-$(VERSION)/.cvsignore; \
	   tar cvf $(NAME)-$(VERSION).tar $(NAME)-$(VERSION); \
	   gzip -f --best $(NAME)-$(VERSION).tar; \
	   rm -rf $(NAME)-$(VERSION); \
	   mv $(NAME)-$(VERSION).tar.gz $(EXPORT_DIR))
# 	cd $(EXPORT_DIR)/../..; \
# 	  (sed -e "s/_CALVERS_/$(VERSION)/" misc/bindings.dat.pre \
# 	      > misc/bindings.dat; \
# 	   ./scripts/create_html.sh)

# Rebuilding Makefile
#####################

Makefile: Makefile.in
	./config.status			

config.status: configure
	./config.status --recheck

configure: configure.in
	autoconf

# Emacs tags
############

TAGS: $(SRC)
	otags -o $@ $^

# Cleaning
##########

clean:
	rm -f TAGS META $(TESTS) tests/test $(GENERATED) 
	for i in . src tests utils; do \
	  rm -f $$i/*~ $$i/\#* $$i/*.cm[iox] $$i/*.*a $$i/*$(OBJ_EXT) $$i/a.out; \
	done

dist-clean distclean: clean
	rm -rf $(NAME).ps.gz doc $(LIBDIR)

clean-configure cleanconfig: dist-clean
	rm -f Makefile configure config.*

# Depend
########

.depend depend: $(GENERATED)
	rm -f .depend
	$(CAMLDEP) $(CAMLIBS) src/*.ml src/*.mli tests/*.ml tests/*.mli \
	  > .depend

view-depend:
	$(CAMLDOT) .depend | dot -Tps | gv -

include .depend
